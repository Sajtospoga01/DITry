# Generated by Django 4.0.1 on 2022-03-18 14:09

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import feed.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, unique=True, validators=[django.core.validators.MinLengthValidator(2)])),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('comment', models.CharField(max_length=256, validators=[django.core.validators.MinLengthValidator(1)])),
                ('likes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, validators=[django.core.validators.MinLengthValidator(2)])),
                ('private', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('website', models.URLField(blank=True)),
                ('bio', models.CharField(blank=True, max_length=256)),
                ('profile_picture', models.ImageField(blank=True, upload_to='profile_images', validators=[django.core.validators.validate_image_file_extension])),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='', max_length=128)),
                ('likes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('picture', models.ImageField(upload_to='backend', validators=[django.core.validators.validate_image_file_extension])),
                ('original', models.IntegerField(null=True, validators=[feed.models.Validators.validate_origin_post])),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_requests_created', to='feed.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liked_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_on_post', to='feed.post')),
                ('liker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_by_user', to='feed.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='In_folder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feed.folder')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feed.post')),
            ],
        ),
        migrations.CreateModel(
            name='FollowsUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_by_user', to='feed.userprofile')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_to_follow', to='feed.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='FollowsCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_by_user', to='feed.userprofile')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_to_follow', to='feed.category')),
            ],
        ),
        migrations.AddField(
            model_name='folder',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_user_folder', to='feed.userprofile'),
        ),
        migrations.CreateModel(
            name='Comment_likes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feed.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feed.userprofile')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_on_post', to='feed.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_by_user', to='feed.userprofile'),
        ),
        migrations.CreateModel(
            name='Categorises',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_in_category', to='feed.category')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_post', to='feed.post')),
            ],
        ),
        migrations.AddConstraint(
            model_name='likes',
            constraint=models.UniqueConstraint(fields=('liker', 'liked_post'), name='Likes'),
        ),
        migrations.AddConstraint(
            model_name='in_folder',
            constraint=models.UniqueConstraint(fields=('folder', 'post'), name='stores'),
        ),
        migrations.AddConstraint(
            model_name='followsuser',
            constraint=models.UniqueConstraint(fields=('follower', 'following'), name='Follow_user'),
        ),
        migrations.AddConstraint(
            model_name='followscategory',
            constraint=models.UniqueConstraint(fields=('follower', 'following'), name='Follows_category'),
        ),
        migrations.AddConstraint(
            model_name='comment_likes',
            constraint=models.UniqueConstraint(fields=('user', 'comment'), name='user_likes_comment'),
        ),
        migrations.AddConstraint(
            model_name='comment',
            constraint=models.UniqueConstraint(fields=('id', 'post_id', 'user_id'), name='Comment'),
        ),
        migrations.AddConstraint(
            model_name='categorises',
            constraint=models.UniqueConstraint(fields=('post', 'category'), name='Categorises'),
        ),
    ]
